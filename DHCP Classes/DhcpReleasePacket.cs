using System.Linq;

class DhcpReleasePacket
{
    //-- MessageType, HardwareType, Hardware-Address-Length
    public byte[] firstPart { get; set; } = new byte[3] { 0x01, 0x01, 0x06 };

    //--hops : Anzahl der DHCP-Relay-Agents auf dem Datenpfad
    public byte[] hops { get; set; } = new byte[1] { 0x00 };

    //--transactionID : ID der Verbindung zwischen Client und Server
    public byte[] transactionID { get; set; } = new byte[4] { 0x00, 0x00, 0x00, 0x00 };

    //--secs : Zeit in Sekunden seit dem Start des Clients
    public byte[] secs { get; set; } = new byte[2] { 0x0c, 0x00 };

    //--BootpFlags : Z. Zt. wird nur das erste Bit verwendet (zeigt an, ob der Client noch eine gültige IP-Adresse hat), die restlichen Bits sind für spätere Protokollerweiterungen reserviert
    public byte[] bootpFlags { get; set; } = new byte[2] { 0x00, 0x00 };

    //--clientIP : Client-IP-Adresse
    public byte[] clientIP { get; set; } = new byte[4] { 0x00, 0x00, 0x00, 0x00 };

    //--yourIP : eigene IP-Adresse
    public byte[] yourIP { get; set; } = new byte[4] { 0x00, 0x00, 0x00, 0x00 };

    //--nextServerIP : Server-IP-Adresse
    public byte[] nextServerIP { get; set; } = new byte[4] { 0x00, 0x00, 0x00, 0x00 };

    //--relayAgentIP : Relay-Agent-IP-Adresse
    public byte[] relayAgentIP { get; set; } = new byte[4] { 0x00, 0x00, 0x00, 0x00 };

    //--clientMac : Client-MAC-Adresse
    public byte[] clientMac { get; set; } = new byte[6] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };

    //--clientMacPadding : 
    public byte[] clientMacPadding { get; set; } = new byte[10] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };

    //--serverHostname :  Name des DHCP-Servers, falls ein bestimmter gefordert wird (enthält C-String), Angabe optional
    public byte[] serverHostname { get; set; } = new byte[64] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };

    //--bootFilename :  Name einer Datei (z. B. System-Kernel), die vom Server per TFTP an den Client gesendet werden soll (enthält C-String), Angabe optional
    public byte[] bootFilename { get; set; } = new byte[128] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };

    //--magicCookie : 
    public byte[] magicCookie { get; set; } = new byte[4] { 0x63, 0x82, 0x53, 0x63 };

    //--dhcpMessageType (Request)
    private byte[] dhcpMessageType = new byte[3] { 0x35, 0x01, 0x07 };

    //--GROUP OPTION DHCP Server Identifier  --------------------------------------------------------------------------
    private byte[] dhcpSerId = new byte[1] { 0x36 };
    private byte[] dhcpServIdLength = new byte[1] { 0x04 };

    //--dhcpServerIdValue : DHCP Server IP-Address in hex
    public byte[] dhcpServIdValue { get; set; } = new byte[4] { 0x00, 0x00, 0x00, 0x00 };
    //--END GROUP DHCP Server Identifier    --------------------------------------------------------------------------

    //--GROUP OPTION Client Identifier      --------------------------------------------------------------------------
    private byte[] clientId = new byte[1] { 0x3d };
    private byte[] clientIdLength = new byte[1] { 0x07 };
    private byte[] clientIdHwType = new byte[1] { 0x01 };

    //--clientIdValue : Hardware-Type (1Byte) + Client MAC-Address in hex (6Byte)
    public byte[] clientIdValue { get; set; } = new byte[6] {  0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
    //--END GROUP Client Identifier         --------------------------------------------------------------------------

    //--end
    private byte[] end = new byte[1] { 0xff };

    //--padding
    byte[] padding = new byte[41] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };

    public byte[] buildPacket()
    {
        byte[] dhcpRelease = new byte[300];
        dhcpRelease = firstPart.Concat(hops).Concat(transactionID).Concat(secs).Concat(bootpFlags).Concat(clientIP).Concat(yourIP).Concat(nextServerIP).Concat(relayAgentIP).Concat(clientMac).Concat(clientMacPadding).Concat(serverHostname).Concat(bootFilename).Concat(magicCookie).Concat(dhcpMessageType).Concat(dhcpSerId).Concat(dhcpServIdLength).Concat(dhcpServIdValue).Concat(clientId).Concat(clientIdLength).Concat(clientIdHwType).Concat(clientIdValue).Concat(end).Concat(padding).ToArray();
        
        if (dhcpRelease.Length != 300)
        {
            return null;
        }
        else {
            return dhcpRelease;
        }        
    }
}